# Generic Particle template generated by dtpr-package on Mon Feb 03 10:39:16 2025.
# Author:
#     [Your Name]
# Version:
#     0.0
#
# This class is a template for a generic particle class. It is used to create a particle object with 
# various attributes. It should contain 'to_dict' and '__str__' methods since they are used in the 
# dtpr.base.Event class. If you want to make this class able to be built on the fly when an instance
# of Event is created, your __init__ method should be able to handle a root event entry as an input 
# argument called "ev".


from dtpr.utils.functions import color_msg
import numpy as np

np.random.seed(1935)

class G4Digi(object):
    # Define the attributes of the class in the __slots__ list to save memory
    __slots__ = ["index", "wh", "sc", "st", "sl", "w", "l", "time", "BX", "particle_type"]

    def __init__(
            self,
            idigi,
            ev=None,
            wh=None,
            sc=None,
            st=None,
            sl=None,
            w=None,
            l=None,
            time=None,
            bx=None,
            particle_type=None,
        ):
        """
        Initialize a G4Digi instance.

        description here...

        :param index: The index of the particle.
        :type index: int
        :param ev: The root event entry containing event data.
        .
        . (add more parameters here if needed)
        .
        """
        self.index = idigi
        self.wh = -2
        self.sc = 1
        self.st = 1
        if ev is not None: # constructor with root event entry info
            # Extract the need attributes from the root event entry
            # and assign them to the corresponding attributes of the instance
            self.sl = int(ev.SLHit_SL[idigi])
            self.w = int(ev.SLHit_Cell[idigi])
            self.l = int(ev.SLHit_Layer[idigi])
            self.time = ev.SLHit_Time[idigi]
            self._correct_time()
            self.BX = int(self.time // 25)  # each BX is at 25ns
            self.particle_type = int(ev.SLHit_PDG[idigi])
        else: # constructor with explicit info
            # Initialize the attributes of the instance with the input arguments
            self.sl = sl
            self.w = w
            self.l = l
            self.time = time
            self.BX = bx
            self.particle_type = particle_type

    def _correct_time(self):
        # ----- mimic the Javi's Code ----
        # simulate drift time
        mean, stddev = 175, 75
        time_offset = 400
        delay = np.random.normal(loc=mean, scale=stddev)
        self.time += abs(delay) + time_offset # why abs ? 

    def to_dict(self):
        """
        Convert the G4Digi instance to a dictionary.

        :return: A dictionary representation of the G4Digi instance.
        :rtype: dict
        """
        return {attr: getattr(self, attr) for attr in self.__slots__}

    def __str__(self, indentLevel=0):
        """
        Generate a string representation of the G4Digi instance.

        :param indentLevel: The indentation level for the summary.
        :type indentLevel: int
        :return: The shower summary.
        :rtype: str
        """
        summary = [
            color_msg(
                f"------ G4Digi {self.index} info ------",
                color="yellow",
                indentLevel=indentLevel,
                return_str=True,
            )
        ]

        summary.append(
            color_msg(
                ", ".join(
                    [
                        f"{attr.capitalize()}: {getattr(self, attr)}"
                        for attr in self.__slots__
                        if attr != "index"
                    ]
                ),
                indentLevel=indentLevel + 1,
                return_str=True,
            )
        )
        return "\n".join(summary)


if __name__ == '__main__':
    # Test the class here
    particle_instance = G4Digi(1)

    print(particle_instance)