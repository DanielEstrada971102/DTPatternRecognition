# Generic NTuple template generated by dtpr-package on Mon Feb 03 10:27:50 2025
# 
# Author:
#     [Your Name]
# Version:
#     0.1
#
# This class is a template for a generic NTuple class. It is used to create an NTuple object with 
# various attributes. It inherits from the NTuple class (dtpr.base.ntuple) and contains a 'run' method 
# for processing Event instances. The __init__ method calls super().__init__ to initialize the base class.
import importlib
from dtpr.base import Event, NTuple
from src.utils.G4.shower_functions import build_fwshowers, build_real_showers, analyze_fwshowers
from src.utils.config import RUN_CONFIG

class G4DtNtuple(NTuple):
    def __init__(self, inputFolder, maxfiles=-1):
        """
        Initialize a G4DtNTuple instance.

        :param inputFolder: The folder containing the input files.
        :type inputFolder: str
        :param selectors: A list of selector functions to apply to the events. See dtpr.utils.filters
        :type selectors: list
        :param maxfiles: The maximum number of files to process. Defaults to -1 (process all files).
        :type maxfiles: int, optional
        """
        params = RUN_CONFIG.ntuple_params
        self.threshold = params["shower-threshold"]

        selectors = []
        for source in RUN_CONFIG.ntuple_selectors:
            selector_module, selector_name = source.rsplit('.', 1)
            module = importlib.import_module(selector_module)
            selectors.append(getattr(module, selector_name))

        super().__init__(inputFolder, selectors, maxfiles, tree_name="/DTSim") # add tree_name argument if needed, default is "/TTREE"

    def event_preprocessor(self, ev: Event):
        """
        Preprocess the event. Specific to G4DtNTuple.

        :param ev: The event to preprocess.
        :type ev: Event
        :returns: The preprocessed event if it passes the selection criteria, otherwise None.
        :rtype: Event
        """
        # build_simple_showers(ev)  # to build showers2comp and pyshowers
        build_real_showers(ev, threshold=self.threshold) # to build real showers
        build_fwshowers(ev, threshold=self.threshold)  # to build fwshowers
        # analyze_fwshowers(ev) # to label fwshowers as true
        if not self.select_event(ev):
            pass
        else:
            return ev


if __name__ == '__main__':
    import os
    from dtpr.utils.config import EVENT_CONFIG
    # Test the class here
    def example_selector(event):
        # Example selector function that always returns True
        return True

    input_folder = "./g4DTSimNtuple_muonTest_refactored.root" # <------- Add the path to the input folder
    selectors = [example_selector]
    max_files = 5

    EVENT_CONFIG.change_config_file(config_path=os.path.abspath("../utils/yamls/g4_event_config.yaml"))
    G4DtNTuple_instance = G4DtNtuple(input_folder, selectors, maxfiles=max_files)

    # you can access events by index such as a list
    for i in G4DtNTuple_instance.events[0:10]:
        print(i)
