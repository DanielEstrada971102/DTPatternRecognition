# Generic Particle template generated by dtpr-package on {date}.
# Author:
#     [Your Name]
# Version:
#     0.0
#
# This class is a template for a generic particle class. It is used to create a particle object with 
# various attributes. It inherits from dtpr.particles.Particle which provides needed methods such as 
#'__str__' since they are used in the dtpr.base.Event class. If you want to make this class able to 
# be built on the fly when an instance of Event is created, your _init_from_ev method should be able 
# to handle a root event entry as an input argument called "ev".

from dtpr.particles import Particle

class {name}(Particle):
    def __init__(self, index, ev=None, **kwargs):
        """
        Initialize a {name} instance.

        description here...

        :param index: The index of the {name}.
        :type index: int
        :param ev: The TTree event entry containing event data.
        :param kwargs: Additional attributes to set explicitly.
        .
        . (add more parameters here if needed)
        .
        """
        # Initialize the attributes of the instance with the input arguments
        # self.attr1 = kwargs.pop("attr1", None)
        # .
        # (add more attrributes here if needed)
        # .
        # .

        super().__init__(index, ev, **kwargs)


    def _init_from_ev(self, ev):
        # constructor with root event entry info
        # Extract the need attributes from the root event entry
        # and assign them to the corresponding attributes of the instance
        try:
            pass 
        except (AttributeError, IndexError):
            raise ValueError("The provided event does not contain information.")


if __name__ == '__main__':
    # Test the class here
    particle_instance = {name}(1)

    print(particle_instance)