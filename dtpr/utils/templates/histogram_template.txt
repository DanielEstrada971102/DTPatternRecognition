# Generic histogram template generated on {date}
# 
# Author:
#     [Your Name]
# Version:
#     0.1
#
# follow this format to make a eff histogram
#
# "HISTONAME": {
#    "type": "eff",
#    "histoDen": r.TH1D("Denominator name", r';TitleX; Events', nBins, firstBin, lastBin),
#    "histoNum": r.TH1D("Numerator name", r';TitleX; Events', nBins, firstBin, lastBin),
#    "func": lambda reader: __function_for_filling_histograms__,
#    "numdef": lambda reader: __condition_for_numerator__
#  },
#
# follow this format to make a simple distribution histogram
#
# "HISTONAME": {
#    "type": "distribution", --> it also could be distribution2d and distribution3d, just ensure that func provide nd-tuples to fill the histogram
#    "histo": r.TH1D("HISTONAME", r';TitleX; Events', nBins, firstBin, lastBin), --> change if 2d and 3d..
#    "func": lambda reader: __function_for_filling_histograms__,
#  },


import ROOT as r
# from functools import partial
# other imports...

# Histograms defined here...
# - {name}
# ...


# Define the histograms container
histos = {}

nBins = 5
firstBin = 0
lastBin = 10

def func(reader, *args, **kargs):
    pass
    # return ...

def numdef(reader, *args, **kargs):
    pass
    # return ...

histos.update(
    "{name}": { #"HISTONAME"
        "type": "eff",
        "histoDen": r.TH1D("{name}_total", r';TitleX; Events', nBins, firstBin, lastBin),
        "histoNum": r.TH1D("{name}_num", r';TitleX; Events', nBins, firstBin, lastBin),
        "func": func, # other options... lambda reader, *args, **kargs: func(reader, *args, **kargs), | partial(func, *args, **kargs)
        "numdef": numdef, # other optionslambda reader, , *args, **kargs: numdef(reader, *args, **kargs) | partial(func, *args, **kargs)
    },
)

histos.update(
    "{name}": { #"HISTONAME"
        "type": "distribution",
        "histo": r.TH1D("{name}", r';TitleX; Events', nBins, firstBin, lastBin),
        "func": func, # other options... lambda reader, *args, **kargs: func(reader, *args, **kargs), | partial(func, *args, **kargs)
    },
)