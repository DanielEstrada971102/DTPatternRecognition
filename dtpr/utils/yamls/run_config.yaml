# ------------------------------- configuration for Event -------------------------------------#
# follow this format to specify particles to be built:
# particle_types:
#   ...
#   particle_name:
#     class: 'path.to.particle_class', if not defined it will use the default 'dtpr.particles.Particle' class
#     amount: (int, TBranch<int> or TBranch<vector>) that could define how many particles to build  
#     branches: list of branches to be used as attributes 
#       attr_name: 'branch_name' 
#       ...
#     attributes: Other attributes that can be put directly or computed with a expression or a method
#       attr_name: (value)
#         expr: 'expression' to define the attribute, it expects a expression that can use any of 
#                the class attributes directly
#         src: 'src' to define the attribute, it expects the path to a method that receives 
#                 the particle as input
#     filter: condition to filter the particles that want to be built, it expects a expression that
#             can use the particle instace (ref as 'p') and the root event entry (ref as 'ev')
#     sorter: how to sort the particles
#       by: A expresion to execute to decide the order. it expects a expression that can use the 
#           particle instance (ref as 'p') and the root event entry (ref as 'ev')
#       reverse: True/False to sort in reverse order. If not indicated default is False
#
# ================= available particles - dtntuple ================= #
# comment/uncomment/add as needed...
particle_types:
  digis:
    amount: 'digi_nDigis'
    attributes:
      wh: 
        branch: 'digi_wheel'
      sc: 
        branch: 'digi_sector'
      st: 
        branch: 'digi_station'
      sl: 
        branch: 'digi_superLayer'
      w: 
        branch: 'digi_wire'
      l: 
        branch: 'digi_layer'
      time: 
        branch: 'digi_time'
      BX:
        expr: 'time // 25 if time is not None else None'
    sorter:
      by: 'p.BX'
  segments:
    amount: 'seg_nSegments'
    attributes:
      wh: 
        branch: 'seg_wheel'
      sc: 
        branch: 'seg_sector'
      st: 
        branch: 'seg_station'
      phi: 
        branch: 'seg_posGlb_phi'
      eta: 
        branch: 'seg_posGlb_eta'
      nHits_phi: 
        branch: 'seg_phi_nHits'
      nHits_z: 
        branch: 'seg_z_nHits'
      t0_phi: 
        branch: 'seg_phi_t0'
      pos_locx_sl1: 
        branch: 'seg_posLoc_x_SL1'
      pos_locx_sl3: 
        branch: 'seg_posLoc_x_SL3'
      matched_genmuons: []
      matched_tps: []
  tps:  
    amount: 'ph2TpgPhiEmuAm_nTrigs'
    attributes:
      wh: 
        branch: 'ph2TpgPhiEmuAm_wheel'
      sc: 
        branch: 'ph2TpgPhiEmuAm_sector'
      st: 
        branch: 'ph2TpgPhiEmuAm_station'
      phi: 
        branch: 'ph2TpgPhiEmuAm_phi'
      phiB: 
        branch: 'ph2TpgPhiEmuAm_phiB'
      quality: 
        branch: 'ph2TpgPhiEmuAm_quality'
      rpcFlag: 
        branch: 'ph2TpgPhiEmuAm_rpcFlag'
      _BX: # first get the BX from the branch
        branch: 'ph2TpgPhiEmuAm_BX'
      BX: # then re-define the BX attribute to center it at 0
        expr: '_BX - 20'
      phires_conv:
        expr: '65536.0 / 0.5'
      matched_segments: []
      matched_genmuons: []
    filter: 'p.quality >= 0'
  genmuons:
    amount: 'gen_nGenParts'
    attributes:
      pt: 
        branch: 'gen_pt'
      eta: 
        branch: 'gen_eta'
      phi: 
        branch: 'gen_phi'
      charge: 
        branch: 'gen_charge'
      matched_segments: []
      matched_tps: []
      showered: False
    filter: 'abs(ev.gen_pdgId[p.index]) == 13'
    sorter:
      by: 'p.pt'
      reverse: True
  emushowers:
    amount: 'ph2Shower_station'
    attributes:
      wh: 
        branch: 'ph2Shower_wheel'
      sc: 
        branch: 'ph2Shower_sector'
      st: 
        branch: 'ph2Shower_station'
      sl: 
        branch: 'ph2Shower_superlayer'
      nDigis: 
        branch: 'ph2Shower_ndigis'
      BX: 
        branch: 'ph2Shower_BX'
      min_wire: 
        branch: 'ph2Shower_min_wire'
      max_wire: 
        branch: 'ph2Shower_max_wire'
      avg_pos: 
        branch: 'ph2Shower_avg_pos'
      avg_time: 
        branch: 'ph2Shower_avg_time'
      wires_profile: 
        branch: 'ph2Shower_wires_profile'
  simhits:
    amount: 'simHit_nSimHits'
    attributes:
      wh: 
        branch: 'simHit_wheel'
      sc: 
        branch: 'simHit_sector'
      st: 
        branch: 'simHit_station'
      sl: 
        branch: 'simHit_superLayer'
      l: 
        branch: 'simHit_layer'
      w: 
        branch: 'simHit_wire'
      process_type: 
        branch: 'simHit_processType'
      particle_type: 
        branch: 'simHit_particleType'

# -------------------------------- configuration for NTuple --------------------------------------#
ntuple_tree_name: '/dtNtupleProducer/DTTREE'

# =============== available preprocessors - dtntuple ================= #
# define the preprocessors to be used in the ntuple, follow the format:
# preprocessor_name: Any name, not relevant to the codes
#   src: 'path.to.preprocessor'
#   kwargs: # optional arguments to be passed to the preprocessor
#     arg1: value1
#     ...
# ...
ntuple_preprocessors:
  # # define the event preprocessors to be used in the ntuple
  genmuon_matcher:
    src: "dtpr.utils.genmuon_functions.analyze_genmuon_matches"

# ================= available selectors - dtntuple ================= #
# define the selectors to be used in the ntuple, follow the format:
# selector_name: Any name, not relevant to the codes
#   src: 'path.to.selector' 
#   kwargs: # optional arguments to be passed to the selector
#     arg1: value1
#     ...
# ...
ntuple_selectors:
# comment/uncomment/add as needed...
  baseline:
    src: "dtpr.utils.filters.base_filters.baseline"

# -------------------------------- configuration for histograms -----------------------------------#
histo_sources:
  # define the source modules of the histograms
  - dtpr.utils.histograms.genmuon_histos
  - dtpr.utils.histograms.am_histos

histo_names:
  # Histogram to fill - Uncomment or add histograms as needed. 
  # They should exist in any of the source modules
  # # ============ efficiencies ============ #
  - seg_eff_MB1
  - seg_eff_MB2
  - seg_eff_MB3
  - seg_eff_MB4
  # ============== rates =============== #
  - AM_rate_allBX_MB1
  - AM_rate_allBX_MB2
  - AM_rate_allBX_MB3
  - AM_rate_allBX_MB4
  - AM_rate_goodBX_MB1
  - AM_rate_goodBX_MB2
  - AM_rate_goodBX_MB3
  - AM_rate_goodBX_MB4
  # ============ leading_mu ============ #
  - LeadingMuon_pt
  - LeadingMuon_eta
  - LeadingMuon_maxDPhi
  - LeadingMuon_maxDEta
  # =========== subleading_mu ========== #
  - SubLeadingMuon_pt
  - SubLeadingMuon_eta
  - SubLeadingMuon_maxDPhi
  - SubLeadingMuon_maxDEta
  # ============= other_vars =========== #
  - muon_DR
  - nGenMuons
  - dphimax_seg_showering_muon
  - dphimax_seg_non_showering_muon
  - dphimax_tp_showering_muon
  - dphimax_tp_non_showering_muon
  - dphi_seg_showering_muon
  - dphi_seg_non_showering_muon
  - dphi_tp_showering_muon
  - dphi_genmuon_showering_muon

# ----------------------------- configuration for event inspector ---------------------------------#
# inspector-functions:
  # define the functions to be used in the event inspector in the format:
  # func1:
  #   src: "..."
  #   kwargs:
  #     arg1: value1
  #     ...
  #   ...

# ------------------------------- configuration for dt plots  -------------------------------------#
dt_plots_configs:
  mplhep-style: 'CMS'         # Style to use for the plots

  figure-configs: 
    figure.dpi: 100             # Dots per inch (resolution)
    axes.titlesize: 'small'     # Axes title size
    axes.labelsize: 'x-small'    # Axes label size
    xtick.labelsize: 'x-small'    # X-axis tick label size
    ytick.labelsize: 'x-small'    # Y-axis tick label size
    legend.fontsize: 'small'   # Legend font size

  dt-cell-info:
    particle_type: 'digis'      # Particle type to use
    cmap_var: 'time'            # Variable to use for the colormap

  cmap-configs:
    cmap: 'viridis'             # Colormap to use
    cmap_under: 'none'          # Color for values under vmin
    norm:
      class: 'matplotlib.colors.Normalize'  # Normalization class
      vmin: 299                             # Minimum value for normalization
      vmax: 1000                            # Maximum value for normalization

  # DT bounds and cells are matplotlib.patches.Rectangle objects
  bounds-kwargs:
    facecolor: ["lightgray", "lightyellow", "lightpink", "lightblue"]   # Color of the rectangle [MB, SL1, SL3, SL2]
    edgecolor: "k"                                                      # Color of the edge
    alpha: 0.3                                                          # Transparency of the rectangle
    linewidth: 0.5                                                      # Width of the edge

  cells-kwargs:
    edgecolor: "k"              # Color of the edge
    linewidth: 0.025              # Width of the edge